proxy:
  '/weather':
    target: 'http://api.weatherstack.com'
    changeOrigin: true
    pathRewrite:
      '^/weather': '/current?access_key=${WEATHERSTACK_API_KEY}'


// REMOVE: private readonly apiKey: string; (from class properties)

static fromConfig(configApi: ConfigApi, dependencies: { discoveryApi: DiscoveryApi; fetchApi: FetchApi }) {
  return new WeatherClient({
    discoveryApi: dependencies.discoveryApi,
    fetchApi: dependencies.fetchApi,
    proxyPath: configApi.getOptionalString('weather.proxyPath') ?? DEFAULT_PROXY_PATH,
  });
}

constructor(opts: { discoveryApi: DiscoveryApi; fetchApi: FetchApi; proxyPath: string }) {
  this.discoveryApi = opts.discoveryApi;
  this.fetchApi = opts.fetchApi;
  this.proxyPath = opts.proxyPath;
}

// In getWeather, REMOVE the access_key part:
public async getWeather(location: string): Promise<WeatherResponse> {
  const url = `&query=${encodeURIComponent(location)}`; // prepend with & to match the existing `?access_key=...`
  const response = await this.fetch<WeatherResponse>(url, {
    method: 'GET',
    headers: { 'Content-Type': 'application/json' },
  });

  return response;
}
