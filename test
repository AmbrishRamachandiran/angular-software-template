import fetch from 'node-fetch';
import { Config } from '@backstage/config';

interface OpenFgaRequest {
  tuple_key: { user: string; relation: string; object: string };
  authorization_model_id: string;
}

interface OpenFgaResponse {
  allowed: boolean;
  ok?: boolean;
  message: string;
}

let permissionResponse: OpenFgaResponse | null = null;

export function getPermissionResponse(): OpenFgaResponse | null {
  return permissionResponse;
}

export class OpenFgaClient {
  private baseUrl: string;
  private storeId: string;
  private authorizationModelId: string;

  constructor(config: Config) {
    // Load configuration values dynamically
    this.baseUrl = config.getString('openfga.baseUrl');
    this.storeId = config.getString('openfga.storeId');
    this.authorizationModelId = config.getString('openfga.authorizationModelId');
  }

  async sendPermissionRequest(entityName: string, action: string, userName: any): Promise<OpenFgaResponse> {
    const url = `${this.baseUrl}/stores/${this.storeId}/check`;

    const relation = action.toLowerCase() === 'delete' ? 'catalog_entity_delete' : 'catalog_entity_read';

    const requestBody: OpenFgaRequest = {
      tuple_key: {
        user: `${userName}`,
        relation,
        object: `catalog_entity:${entityName}`,
      },
      authorization_model_id: this.authorizationModelId,
    };

    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      throw new Error(`OpenFGA API call failed with status: ${response.status}`);
    }

    const data = await response.json() as OpenFgaResponse;
    permissionResponse = data;
    return data;
  }

  // ... additional methods for addPolicy and revokePolicy (similar to the code above)
}

import {
  createPlugin,
  createRoutableExtension,
} from '@backstage/core-plugin-api';
import { ConfigApi, configApiRef } from '@backstage/core-plugin-api';
import { rootRouteRef } from './routes';
import { OpenFgaClient } from './client';

export const openfgaPlugin = createPlugin({
  id: 'openfga',
  routes: {
    root: rootRouteRef,
  },
  register({ router, config }) {
    // Pass the entire config object to OpenFgaClient
    const openFgaClient = new OpenFgaClient(configApiRef);

    // Use openFgaClient in the plugin as needed
  },
});

export const OpenfgaPage = openfgaPlugin.provide(
  createRoutableExtension({
    name: 'OpenfgaPage',
    component: () =>
      import('./components/HeaderComponent').then(m => m.HeaderComponent),
    mountPoint: rootRouteRef,
  }),
);
