To dynamically populate a field in a Backstage software template form based on the selection of another field, like updating “AWS region” based on “AWS cost center,” you can use custom form fields with async API calls. Here’s a high-level approach to achieve this in Backstage:

1. Define Custom Template Field Components

Backstage allows custom fields in software templates using custom field extensions. You can create components for “AWS Cost Center” and “AWS Region” fields, setting up “AWS Cost Center” to trigger an API call when it changes.

2. Create a Custom Form Field for AWS Cost Center

First, define a custom form component for “AWS Cost Center” that handles the user’s selection and stores it in the template form’s state.

import React, { useState } from 'react';
import { TextField } from '@material-ui/core';
import { TemplateBackstagePluginFormField } from '@backstage/plugin-scaffolder-react';
import { useField } from 'formik';

export const AwsCostCenterField = ({ name }: { name: string }) => {
  const [field, , helpers] = useField(name);
  const [selectedCostCenter, setSelectedCostCenter] = useState(field.value);

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = event.target.value;
    setSelectedCostCenter(newValue);
    helpers.setValue(newValue);
  };

  return (
    <TextField
      label="AWS Cost Center"
      variant="outlined"
      value={selectedCostCenter}
      onChange={handleChange}
      fullWidth
    />
  );
};

3. Use useEffect in AWS Region Field to Fetch Regions

For the “AWS Region” field, set up a custom component that listens to changes in the “AWS Cost Center” field. When it detects a change, it triggers an API call to fetch available AWS regions based on the cost center selection.

import React, { useEffect, useState } from 'react';
import { Select, MenuItem, CircularProgress } from '@material-ui/core';
import { useField, useFormikContext } from 'formik';

export const AwsRegionField = ({ name }: { name: string }) => {
  const [field, , helpers] = useField(name);
  const { values } = useFormikContext();
  const [regions, setRegions] = useState<string[]>([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const fetchRegions = async () => {
      if (values.awsCostCenter) {  // Replace with the actual name of the cost center field
        setLoading(true);
        try {
          const response = await fetch(`https://api.example.com/regions?costCenter=${values.awsCostCenter}`, {
            headers: {
              'Authorization': 'Bearer YOUR_API_TOKEN',  // Add your API token or other authentication
            },
          });
          const data = await response.json();
          setRegions(data.regions);
        } catch (error) {
          console.error('Failed to fetch regions:', error);
        } finally {
          setLoading(false);
        }
      }
    };

    fetchRegions();
  }, [values.awsCostCenter]);

  return (
    <>
      {loading ? (
        <CircularProgress />
      ) : (
        <Select
          label="AWS Region"
          variant="outlined"
          value={field.value}
          onChange={(e) => helpers.setValue(e.target.value)}
          fullWidth
        >
          {regions.map(region => (
            <MenuItem key={region} value={region}>
              {region}
            </MenuItem>
          ))}
        </Select>
      )}
    </>
  );
};

4. Register the Custom Fields in Backstage

Finally, register these custom fields in Backstage’s plugin.ts to use them in your software template.

import { scaffolderPlugin } from '@backstage/plugin-scaffolder';
import { AwsCostCenterField } from './components/AwsCostCenterField';
import { AwsRegionField } from './components/AwsRegionField';

scaffolderPlugin.provide({
  fieldExtensions: [
    { component: AwsCostCenterField, name: 'AwsCostCenter' },
    { component: AwsRegionField, name: 'AwsRegion' },
  ],
});

5. Use the Fields in Your Template YAML

In the template YAML, reference these custom fields:

parameters:
  - title: "AWS Configuration"
    properties:
      awsCostCenter:
        type: string
        'ui:field': AwsCostCenter
      awsRegion:
        type: string
        'ui:field': AwsRegion

This setup will dynamically fetch and update the “AWS Region” options based on the selected “AWS Cost Center.” Make sure to handle any API authentication securely, especially if dealing with sensitive credentials.