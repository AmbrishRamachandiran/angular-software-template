catalog table :

import Tooltip from '@mui/material/Tooltip';
import Typography from '@mui/material/Typography';


createSpecTargetsColumn(): TableColumn<CatalogTableRow> {
 return {
    title: 'Targets',
    field: 'entity.spec.targets',
    customFilterAndSearch: (query, row) => {
      let targets: JsonArray = [];
      if (
        row.entity?.spec?.targets &&
        Array.isArray(row.entity?.spec?.targets)
      ) {
        targets = row.entity?.spec?.targets;
      } else if (row.entity?.spec?.target) {
        targets = [row.entity?.spec?.target];
      }
      return targets
        .join(', ')
        .toLocaleUpperCase('en-US')
        .includes(query.toLocaleUpperCase('en-US'));
    },
    render: ({ entity }) => (
      <>
        {(entity?.spec?.targets || entity?.spec?.target) && (
          <Tooltip title={(
            (entity!.spec!.targets as JsonArray) || [entity.spec.target]
          ).join(', ')} placement="bottom-start">
            <Typography noWrap>{
              (entity!.spec!.targets as JsonArray) || [entity.spec.target]
            }</Typography>
          </Tooltip>
        )}
      </>
    ),
 };
},


createMetadataDescriptionColumn(): TableColumn<CatalogTableRow> {
 return {
    title: 'Description',
    field: 'entity.metadata.description',
    render: ({ entity }) => (
      <Tooltip title={entity.metadata.description} placement="bottom-start">
        <Typography noWrap>{entity.metadata.description}</Typography>
      </Tooltip>
    ),
    width: 'auto',
 };
},
