import {
  AuthorizeResult,
  PolicyDecision,
  isResourcePermission,
} from '@backstage/plugin-permission-common';
import {
  PermissionPolicy,
  PolicyQuery,
  PolicyQueryUser,
} from '@backstage/plugin-permission-node';
import { BackstageIdentityResponse } from '@backstage/plugin-auth-node';
import { ConfigApi, DiscoveryApi } from '@backstage/core-plugin-api';
import { openFgaPolicyEvaluator } from './openFgaPolicyEvaluator';
import { parseEntityRef } from '@backstage/catalog-model'; // Import entity reference parser

export class OpenFgaCatalogPolicy implements PermissionPolicy {
  private openFgaClient: openFgaPolicyEvaluator;

  constructor(configApi: ConfigApi, discoveryApi: DiscoveryApi) {
    this.openFgaClient = openFgaPolicyEvaluator.fromConfig(
      configApi,
      discoveryApi,
    );
  }

  async handle(
    request: PolicyQuery,
    user?: PolicyQueryUser,
  ): Promise<PolicyDecision> {
    const identityUser = user as BackstageIdentityResponse;

    // Check if the request is for catalog-entity permissions
    if (isResourcePermission(request.permission, 'catalog-entity')) {
      if (request.permission.name === 'catalog.entity.delete' && request.resource) {
        try {
          // Ensure request.resource is a string (resource reference)
          if (typeof request.resource !== 'string') {
            console.warn('PolicyQuery resource is missing or invalid');
            return { result: AuthorizeResult.DENY };
          }

          // Extract entity name dynamically from request.resource
          const entityRef = parseEntityRef(request.resource);
          const entityName = entityRef.name; // Get entity name
          const userName = identityUser?.identity.ownershipEntityRefs;

          if (!entityName) {
            return { result: AuthorizeResult.DENY };
          }

          // Send permission request to OpenFGA
          const response = await this.openFgaClient.sendPermissionRequest(
            entityName,
            'Delete',
            userName,
          );

          return response.allowed
            ? { result: AuthorizeResult.ALLOW }
            : { result: AuthorizeResult.DENY };
        } catch (error) {
          console.error('Error extracting entity from request:', error);
          return { result: AuthorizeResult.DENY };
        }
      }

      // Allow other catalog-entity permissions
      return { result: AuthorizeResult.ALLOW };
    }

    // Deny all other permissions by default
    return { result: AuthorizeResult.DENY };
  }
}