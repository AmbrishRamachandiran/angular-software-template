To integrate the Backstage Discovery API with your api.ts file and proxy an external API, you can use the DiscoveryApi to dynamically resolve the base URL for your external API. This way, you don’t need to hardcode the API URL in your code; instead, you use the Discovery API to get the service URL based on your configuration.

Steps to integrate DiscoveryApi with the proxy:
	1.	Configure your app-config.yaml with the Proxy URL:
You still need to configure the proxy in app-config.yaml to define the external service.

proxy:
  '/external-api':
    target: 'https://external-api.example.com'
    changeOrigin: true
    secure: true

The proxy forwards requests to /external-api to the target URL defined here.

	2.	Use DiscoveryApi to Dynamically Discover the Service URL:
You can use DiscoveryApi in your api.ts file to discover the proxy or the service endpoint dynamically.
Here’s how you can set this up:

Example api.ts File

import { createApiRef, DiscoveryApi } from '@backstage/core-plugin-api';
import { createApiFactory } from '@backstage/core-plugin-api';

export const externalApiRef = createApiRef({
  id: 'plugin.external-api',
});

export class ExternalApiClient {
  private readonly discoveryApi: DiscoveryApi;

  constructor(discoveryApi: DiscoveryApi) {
    this.discoveryApi = discoveryApi;
  }

  // Get the service URL dynamically using Discovery API
  private async getServiceUrl(): Promise<string> {
    const proxyUrl = await this.discoveryApi.getBaseUrl('proxy'); // Replace 'proxy' with your service name
    return `${proxyUrl}/external-api`; // Combine with the proxy path
  }

  async getData(): Promise<any> {
    try {
      const serviceUrl = await this.getServiceUrl();
      const response = await fetch(serviceUrl, { 
        method: 'GET',
        headers: {
          // Optional: Set authentication headers if needed
          Authorization: 'Bearer YOUR_API_TOKEN',
        },
      });
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Failed to fetch data:', error);
      throw error;
    }
  }
}

export const externalApiClientFactory = createApiFactory({
  api: externalApiRef,
  deps: { discoveryApi: DiscoveryApi },
  factory: ({ discoveryApi }) => new ExternalApiClient(discoveryApi),
});

Explanation:
	1.	Discovery API: The DiscoveryApi is used to dynamically resolve the base URL of your proxy or service. In the example above, discoveryApi.getBaseUrl('proxy') is used to get the base URL for the proxy service configured in app-config.yaml.
	2.	Dynamic Service URL: The method getServiceUrl() constructs the full URL for the external API by combining the base URL obtained from the Discovery API and the path defined for the proxy (/external-api).
	3.	Fetching Data: The getData() function uses the fetch API to call the resolved URL. You can also add headers such as Authorization for API authentication.

Using the API in Frontend:

Now that the API client is set up, you can use it in your React component as shown in the previous example.

import React, { useEffect, useState } from 'react';
import { useApi } from '@backstage/core-plugin-api';
import { externalApiRef } from './api'; // Import the API client

const ExternalDataComponent = () => {
  const externalApi = useApi(externalApiRef);
  const [data, setData] = useState<any>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const result = await externalApi.getData();
        setData(result);
      } catch (error) {
        console.error('Error fetching external data:', error);
      }
    };
    
    fetchData();
  }, [externalApi]);

  return (
    <div>
      <h1>External API Data</h1>
      {data ? <pre>{JSON.stringify(data, null, 2)}</pre> : <p>Loading...</p>}
    </div>
  );
};

export default ExternalDataComponent;

Key Points:
	•	Dynamic URL Resolution: Using DiscoveryApi.getBaseUrl(), you can dynamically fetch the proxy URL configured in Backstage.
	•	Flexibility: The DiscoveryApi allows you to manage service URLs and API integrations without hardcoding values into your codebase.
	•	Authentication: If needed, you can manage API tokens or other credentials through headers in the fetch request.

By using the DiscoveryApi, you ensure that your API integrations remain flexible and maintainable, allowing easier changes to configurations and service URLs across different environments.