import { PermissionPolicy } from '@backstage/plugin-permission-node';
import {
  AuthorizeResult,
  isResourcePermission,
} from '@backstage/plugin-permission-common';
import { BackstageIdentityResponse } from '@backstage/plugin-auth-node';
import { OpenFgaPolicyEvaluator } from './OpenFgaPolicyEvaluator';

export class OpenFgaCatalogPolicy implements PermissionPolicy {
  private readonly openFgaClient: OpenFgaPolicyEvaluator;

  constructor(openFgaClient: OpenFgaPolicyEvaluator) {
    this.openFgaClient = openFgaClient;
  }

  async handle(request: any, user?: BackstageIdentityResponse) {
    const identityUser = user?.identity?.userEntityRef;

    if (!identityUser) {
      return { result: AuthorizeResult.DENY };
    }

    if (isResourcePermission(request.permission, 'catalog-entity')) {
      // Dynamically fetch the entity reference
      const entityRef = request.resourceRef || request.resource?.name;

      if (!entityRef) {
        return { result: AuthorizeResult.DENY };
      }

      const isAllowed = await this.openFgaClient.isAllowed({
        user: identityUser,
        action: request.permission.name,
        resource: entityRef, // Use the dynamically obtained entity name
      });

      return { result: isAllowed ? AuthorizeResult.ALLOW : AuthorizeResult.DENY };
    }

    return { result: AuthorizeResult.DENY };
  }
}