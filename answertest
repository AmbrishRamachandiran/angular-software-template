import { parseEntityRef } from '@backstage/catalog-model';

async handle(
  request: PolicyQuery,
  user?: PolicyQueryUser,
): Promise<PolicyDecision> {
  const identityUser = user as BackstageIdentityResponse;

  // Check if the request is for catalog-entity permissions
  if (isResourcePermission(request.permission, 'catalog-entity')) {
    if (request.permission.name === 'catalog.entity.delete') {
      // Extract entity name dynamically from resourceRef
      const entityRef = request.resourceRef;
      const entityName = entityRef ? parseEntityRef(entityRef).name : null;

      if (!entityName) {
        return { result: AuthorizeResult.DENY };
      }

      const userName = identityUser?.identity.ownershipEntityRefs;

      try {
        // Send a permission request to OpenFGA
        const response = await this.openFgaClient.sendPermissionRequest(
          entityName,
          'Delete',
          userName,
        );

        return response ? { result: AuthorizeResult.ALLOW } : { result: AuthorizeResult.DENY };
      } catch (error) {
        console.error('OpenFGA request failed:', error);
        return { result: AuthorizeResult.DENY };
      }
    }
  }

  return { result: AuthorizeResult.DENY };
}