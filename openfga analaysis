


component:

import React, { useState, useEffect } from 'react';
import { Box, Typography, Select, MenuItem, FormControl, FormLabel, Button } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import { sendPermissionRequest } from '../../client'; 
import Alert from '@material-ui/lab/Alert';

import { useApi, identityApiRef } from '@backstage/core-plugin-api';
import { CATALOG_FILTER_EXISTS, catalogApiRef } from '@backstage/plugin-catalog-react';

const entityOptions = ['acme', 'test', 'entitytest', 'acmetest', 'example-website'];
const actionOptions = ['Read', 'Delete'];

const useStyles = makeStyles({
  success: {
    color: 'green',
  },
  danger: {
    color: 'red',
  },
  info: {
    color: 'blue',
  },
});

export const OpenfgaCatalogComponent = () => {
  const classes = useStyles();
  const [entities, setEntities] = useState <any>([]);
  const [user, setUser] = useState <any>('');
  const [selectedEntity, setSelectedEntity] = useState(entityOptions[0]);
  const [selectedAction, setSelectedAction] = useState(actionOptions[0]);
  const [allowMessage, setAllowMessage] = useState('');
  const [denyMessage, setDenyMessage] = useState('');
  const catalogApi = useApi(catalogApiRef);
  const identityApi = useApi(identityApiRef);

  const handleEntityChange = (event:any) => {
    setSelectedEntity(event.target.value);
  };

  const handleActionChange = (event:any) => {
    setSelectedAction(event.target.value);
  };

  const fetchEntities = async () => {
    try {
      const {items} = await catalogApi.getEntities({ 
        fields: ['metadata.name'],
        filter: {
          'kind=component':
            CATALOG_FILTER_EXISTS,
        },
      });
      const entityNames = items.map((entity) => entity.metadata.name);
      const {ownershipEntityRefs} = await identityApi.getBackstageIdentity()
      setUser(ownershipEntityRefs);
      setEntities(entityNames); 
    } catch (error) {
      console.error('Error fetching catalog entities:', error);
    }
  };

  useEffect(() => {
    fetchEntities();
  }, []);

  const handleActivatePolicy = async () => {
    const response = await sendPermissionRequest(selectedEntity, selectedAction, user);
    if (response.allowed) {
      setAllowMessage(`${user} Has permission to ${selectedAction} the ${selectedEntity}`);
    } else {
      setDenyMessage(`${user} Don't have permission to ${selectedAction} the ${selectedEntity}`);
    }
    setTimeout(() => {
      setAllowMessage('');
      setDenyMessage('');
    }, 5000);
  };

  return (
    <>
    <Box sx={{ border: 1, borderRadius: 0, p: 2, bgcolor: 'cyan' }}>
      <Typography className={classes.info} variant="body2" gutterBottom>
       {user}
      </Typography>
      <Typography variant="h6" gutterBottom>
        START EXISTING POLICY
      </Typography>
      <Box sx={{ display: 'flex', flexDirection: 'column' }}>
        <FormControl>
          <FormLabel>Select Entity</FormLabel>
          <Select
            value={selectedEntity}
            onChange={handleEntityChange}
            label="Select Entity"
          >
             {entities.map((entityName:any) => (
              <MenuItem key={entityName} value={entityName}>
                {entityName}
              </MenuItem>
            ))}
          </Select>
        </FormControl>
        <FormControl>
          <FormLabel>Select Action</FormLabel>
          <Select
            value={selectedAction}
            onChange={handleActionChange}
            label="Select Action"
          >
            {actionOptions.map((option) => (
              <MenuItem key={option} value={option}>
                {option}
              </MenuItem>
            ))}
          </Select>
        </FormControl>
      </Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 2 }}>
        <Button
          className={classes.success}
          variant="contained"
          onClick={handleActivatePolicy}
        >
          Start Policy
        </Button>
      </Box>
      {allowMessage && (
        <Alert severity="success">{allowMessage}</Alert>
      )}
      {denyMessage && (
        <Alert severity="success">{denyMessage}</Alert>
      )}
    </Box>
    {/* <Box sx={{ display: 'flex', flexDirection: 'column' }}>
    <Typography variant="h6" gutterBottom>
       MODIFY CATALOG PERMISSION POLICY
      </Typography>
    </Box> */}
    </>
  );
};



client.ts

import fetch from 'node-fetch';
import { Config } from '@backstage/config';

interface OpenFgaRequest {
  tuple_key: { user: string; relation: string; object: string };
  authorization_model_id: string;
}

interface OpenFgaResponse {
  allowed: boolean;
}

let permissionResponse: OpenFgaResponse | null = null;

export function getPermissionResponse(): OpenFgaResponse | null {
  return permissionResponse;
}

export async function sendPermissionRequest(entityName: string, action: string, userName: any): Promise<OpenFgaResponse> {
  // const openFgaBaseUrl =  config?.getOptionalString('openfga.baseUrl') 
  // const openFgaStoreId =  config?.getOptionalString('openfga.storeId')
  const openFgaBaseUrl = 'http://localhost:8080';
  const openFgaStoreId = '01J20QE9WMGWRRD7FSKJ703JJD';

  const url = `${openFgaBaseUrl}/stores/${openFgaStoreId}/check`;

  const relation = action.toLowerCase() === 'delete' ? 'catalog_entity_delete' : 'catalog_entity_read';

  const requestBody: OpenFgaRequest = {
    tuple_key: {
      user: `${userName}`,
      relation,
      object: `catalog_entity:${entityName}`,
    },
    authorization_model_id: '01J20QHJVYWEADD27RP36HT38A',
  };

  const response = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(requestBody),
  });

  if (!response.ok) {
    throw new Error(`OpenFGA API call failed with status: ${response.status}`);
  }

  const data: OpenFgaResponse = await response.json();
  permissionResponse = data;
  return data;
}


in above code Add one more feature for ADD/MODIFY policy
add one more box at right hand side of START EXISTING POLICY make sure style changes boxes should not overflow each other while doing action
UI requirements :
display user name similar to START EXISTING POLICY box
Typography MODIFY/ADD POLICY
diplay Entity select box
display Select Access Type select box in that show two values owner and viewer
then keep two buttons ADD POLICY and RESET POLICY

once ADD POLICY clicked then send selected entity,selected access type,user to client.ts
in client.ts create a new method for ADD POLICY POST API call 
use same baseurl and store id 
and the body should be 

{
  "writes": {
    "tuple_keys": [
      {
        "_description": "Add guest as owner on catalog_entity:example-website",
        "user": "user:development/guest",
        "relation": "owner",
        "object": "catalog_entity:example-website"
      }
    ]
  },
  "authorization_model_id": "01J20QHJVYWEADD27RP36HT38A"
}

here change available values to dynamic once response is ok in the ui add alert same to START EXISTING POLICY 
the message should be if selectedaccesstype is owner then 
alert message
"Added permission for user to read/delete the entity" in green color
 if selectedaccesstype is viewer then
"Added permission for user to read not delete the entity" in red color

if response is failed the print response.message in alert in red color

once REVOKE POLICY clicked then send selected entity,selected access type,user to client.ts
in client.ts create a new method for REVOKE POLICY POST API call 
use same baseurl and store id 
and the body should be 

{
  "deletes": {
    "tuple_keys": [
      {
        "_description": "Revoke guest as owner on catalog_entity:example-website",
        "user": "user:development/guest",
        "relation": "owner",
        "object": "catalog_entity:example-website"
      }
    ]
  },
  "authorization_model_id": "01J20QHJVYWEADD27RP36HT38A"
}
here change available values to dynamic once response is ok in the ui add alert same to START EXISTING POLICY 
the message should be if selectedaccesstype is owner then 
alert message
"Revoked permission for user to read/delete the entity" in red color
 if selectedaccesstype is viewer then
"Revoked permission for user to read not delete the entity" in red color

if response is failed the print response.message in alert in red color




const entityNames = items.map((entity) => entity.metadata.name);
console.log(entityNames)

the console prints :  ['example-website', 'examples', 'example-nodejs-template', 'guest', 'generated-59f413838c17f2fee12e3a95d80969c1c3ac7fff', 'guests', 'generated-55b6b127e90a03f9410397b2110150349ec2d3d0', 'example-grpc-api', 'generated-352dec834c47a0952b11c48242c4279101f1d67f']
